service: rarity-api

provider:
  name: aws
  runtime: nodejs6.10
  stage: dev
  region: eu-central-1

  environment:
    COUNTRIES_DYNAMODB_TABLE: 'Countries'
    MONETARY_PERIOD_DYNAMODB_TABLE: 'MonetaryPeriod'
    NUMISMATICS_DYNAMODB_TABLE: 'Numismatics'

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.COUNTRIES_DYNAMODB_TABLE}"
   
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.MONETARY_PERIOD_DYNAMODB_TABLE}"

    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.NUMISMATICS_DYNAMODB_TABLE}"

functions:
  findAllCountries:
    handler: api.countries
    events:
      - http:
          path: api/users/{id}/countries
          method: get
          cors: true
#  findOneCountry:
#    handler: countries.one
#    events:
#      - http:
#          path: api/countries/{id}
#          method: get
#          cors: true
  findCountryMonetaryPeriods:
    handler: api.periods
    events:
      - http:
          path: api/countries/{id}/periods
          method: get
          cors: true
  findNumismaticsCoins:
    handler: api.numismatics
    events:
      - http:
          path: api/periods/{id}/coins
          method: get
          cors: true

resources:
  Resources:
    CountriesDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain # this means the table will stay on aws regardless if we delete this service
      Properties:
        AttributeDefinitions:
          -
            AttributeName: userId
            AttributeType: S
          -
            AttributeName: countryId
            AttributeType: S             
        KeySchema:
          -
            AttributeName: userId
            KeyType: HASH
          -
            AttributeName: countryId
            KeyType: RANGE   
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.COUNTRIES_DYNAMODB_TABLE}

    MonetaryPeriodDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain # this means the table will stay on aws regardless if we delete this service
      Properties:
        AttributeDefinitions:
          -
            AttributeName: countryId
            AttributeType: S
          -
            AttributeName: periodId
            AttributeType: S    
          -
            AttributeName: startYear
            AttributeType: N                                    
        KeySchema:
          -
            AttributeName: countryId
            KeyType: HASH
          -
            AttributeName: periodId
            KeyType: RANGE
        LocalSecondaryIndexes:
          -
            IndexName:  'MonetaryPeriodStartYearIndex'
            KeySchema:
              -
                AttributeName: countryId
                KeyType: HASH
              -
                AttributeName: startYear
                KeyType: RANGE 
            Projection:
              ProjectionType: ALL  
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.MONETARY_PERIOD_DYNAMODB_TABLE}

    NumismaticsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain # this means the table will stay on aws regardless if we delete this service
      Properties:
        AttributeDefinitions:
          -
            AttributeName: periodId
            AttributeType: S
          -
            AttributeName: coinId
            AttributeType: S             
        KeySchema:
          -
            AttributeName: periodId
            KeyType: HASH
          -
            AttributeName: coinId
            KeyType: RANGE   
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.NUMISMATICS_DYNAMODB_TABLE}

custom:
  dynamodb:
    start:
      port: 8000
      inMemory: true # dynamodb will run in memory and won't take up any  storage
      migrate: true # create the table when running the app     
      seed: true   
    
    seed:
      domain:
        sources:
          - table: ${self:provider.environment.COUNTRIES_DYNAMODB_TABLE}
            sources: [./db/countries.0.json]  
          - table: ${self:provider.environment.MONETARY_PERIOD_DYNAMODB_TABLE}
            sources: [./db/periods.0.json]  
          - table: ${self:provider.environment.NUMISMATICS_DYNAMODB_TABLE}
            sources: [./db/coins.us.json, ./db/coins.ua.json]

plugins:
  - serverless-dynamodb-local
  - serverless-offline